import { generator } from "./generator";
import { logo } from "./logo";
import type { BetterAuthPlugin } from "@better-auth/core";
import type { LiteralString } from "../../types/helper";

import { APIError } from "../../api";
import { createAuthEndpoint } from "@better-auth/core/api";

export type { FieldSchema, Path, OpenAPIModelSchema } from "./generator";

type ScalarTheme =
	| "alternate"
	| "default"
	| "moon"
	| "purple"
	| "solarized"
	| "bluePlanet"
	| "saturn"
	| "kepler"
	| "mars"
	| "deepSpace"
	| "laserwave"
	| "none";

type ScalarHttpClientState = {
	targetKey: string;
	clientKey: string;
}

const configurationSerializer = (cfg?: OpenAPIOptions) => {
	const { path: _, ...options } = cfg || {};
	const configuration = {
		favicon: `data:image/svg+xml;utf8,${encodeURIComponent(logo)}`,
		...options,
	};

	return JSON.stringify(configuration);
}

const getHTML = (
	apiReference: Record<string, any>,
	options?: OpenAPIOptions
) => `<!doctype html>
<html>
  <head>
    <title>Scalar API Reference</title>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1" />
  </head>
  <body>
    <script
      id="api-reference"
      type="application/json">
    ${JSON.stringify(apiReference)}
    </script>
	 <script>
      document.getElementById('api-reference').dataset.configuration = '${configurationSerializer(options)}'
    </script>
	  <script src="https://cdn.jsdelivr.net/npm/@scalar/api-reference"></script>
  </body>
</html>`;

export interface OpenAPIOptions {
	/**
	 * The path to the OpenAPI reference page
	 *
	 * keep in mind that this path will be appended to the base URL `/api/auth` path
	 * by default, so if you set this to `/reference`, the full path will be `/api/auth/reference`
	 *
	 * @default "/reference"
	 */
	path?: LiteralString;
	/**
	 * Disable the default reference page that is generated by Scalar
	 *
	 * @default false
	 */
	disableDefaultReference?: boolean;
	/**
	 * Theme of the OpenAPI reference page.
	 *
	 * @default "default"
	 */
	theme?: ScalarTheme;
	/**
	 * You can pass custom CSS directly to the component.
	 */
	customCss?: string;
	/**
	 * Whether dark mode is on or off initially (light mode).
	 * 
	 * @default false
	 */
	darkMode?: boolean;
	/**
	 * @default
	 * ```ts
	 * {
	 * 	targetKey: "shell",
	 * 	clientKey: "curl",
	 * }
	 * ```
	 */
	defaultHttpClient?: ScalarHttpClientState;
	/**
	 * By default we only open the relevant tag based on the url,
	 * however if you want all the tags open by default then set
	 * this configuration option.
	 * 
	 * @default false
	 */
	defaultOpenAllTags?: boolean;
	/**
	 * Sets the file type of the document to download, set to 'none' to hide the download button.
	 * 
	 * @default "both"
	 */
	documentDownloadType: "json" | "yaml" | "both" | "direct" | "none";
	/**
	 * By default the models are all closed in the model section at the bottom, this flag will open them all by default.
	 * 
	 * @default false
	 */
	expandAllModelSections?: boolean;
	/**
	 * By default response sections are closed in the operations. This flag will open them by default.
	 * 
	 * @default false
	 */
	expandAllResponses?: boolean;
	/**
	 * Force dark mode to always be this state no matter what.
	 */
	forceDarkModeState?: "dark" | "light";
}

export const openAPI = <O extends OpenAPIOptions>(options?: O) => {
	const path = (options?.path ?? "/reference") as "/reference";
	return {
		id: "open-api",
		endpoints: {
			generateOpenAPISchema: createAuthEndpoint(
				"/open-api/generate-schema",
				{
					method: "GET",
				},
				async (ctx) => {
					const schema = await generator(ctx.context, ctx.context.options);
					return ctx.json(schema);
				},
			),
			openAPIReference: createAuthEndpoint(
				path,
				{
					method: "GET",
					metadata: {
						isAction: false,
					},
				},
				async (ctx) => {
					if (options?.disableDefaultReference) {
						throw new APIError("NOT_FOUND");
					}
					const schema = await generator(ctx.context, ctx.context.options);
					console.log(getHTML(schema, options));
					return new Response(getHTML(schema, options), {
						headers: {
							"Content-Type": "text/html",
						},
					});
				},
			),
		},
	} satisfies BetterAuthPlugin;
};

export type * from "./generator";
