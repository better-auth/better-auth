import {
  mysqlTable,
  varchar,
  text,
  timestamp,
  boolean,
  int,
  index,
  uniqueIndex,
} from "drizzle-orm/mysql-core";

export const custom_user = mysqlTable(
  "custom_user",
  {
    id: int("id").autoincrement().primaryKey(),
    name: varchar("name", { length: 255 }).notNull(),
    email: varchar("email", { length: 255 }).notNull().unique(),
    emailVerified: boolean("email_verified").default(false).notNull(),
    image: text("image"),
    createdAt: timestamp("created_at", { fsp: 3 }).defaultNow().notNull(),
    updatedAt: timestamp("updated_at", { fsp: 3 })
      .defaultNow()
      .$onUpdate(() => /* @__PURE__ */ new Date())
      .notNull(),
  },
  (table) => [uniqueIndex("custom_user_email_uidx").on(table.email)],
);

export const custom_session = mysqlTable(
  "custom_session",
  {
    id: int("id").autoincrement().primaryKey(),
    expiresAt: timestamp("expires_at", { fsp: 3 }).notNull(),
    token: varchar("token", { length: 255 }).notNull().unique(),
    createdAt: timestamp("created_at", { fsp: 3 }).defaultNow().notNull(),
    updatedAt: timestamp("updated_at", { fsp: 3 })
      .$onUpdate(() => /* @__PURE__ */ new Date())
      .notNull(),
    ipAddress: text("ip_address"),
    userAgent: text("user_agent"),
    userId: int("user_id")
      .notNull()
      .references(() => custom_user.id, { onDelete: "cascade" }),
  },
  (table) => [index("custom_session_userId_idx").on(table.userId)],
);

export const custom_account = mysqlTable(
  "custom_account",
  {
    id: int("id").autoincrement().primaryKey(),
    accountId: text("account_id").notNull(),
    providerId: text("provider_id").notNull(),
    userId: int("user_id")
      .notNull()
      .references(() => custom_user.id, { onDelete: "cascade" }),
    accessToken: text("access_token"),
    refreshToken: text("refresh_token"),
    idToken: text("id_token"),
    accessTokenExpiresAt: timestamp("access_token_expires_at", { fsp: 3 }),
    refreshTokenExpiresAt: timestamp("refresh_token_expires_at", { fsp: 3 }),
    scope: text("scope"),
    password: text("password"),
    createdAt: timestamp("created_at", { fsp: 3 }).defaultNow().notNull(),
    updatedAt: timestamp("updated_at", { fsp: 3 })
      .$onUpdate(() => /* @__PURE__ */ new Date())
      .notNull(),
  },
  (table) => [index("custom_account_userId_idx").on(table.userId)],
);

export const custom_verification = mysqlTable(
  "custom_verification",
  {
    id: int("id").autoincrement().primaryKey(),
    identifier: varchar("identifier", { length: 255 }).notNull(),
    value: text("value").notNull(),
    expiresAt: timestamp("expires_at", { fsp: 3 }).notNull(),
    createdAt: timestamp("created_at", { fsp: 3 }).defaultNow().notNull(),
    updatedAt: timestamp("updated_at", { fsp: 3 })
      .defaultNow()
      .$onUpdate(() => /* @__PURE__ */ new Date())
      .notNull(),
  },
  (table) => [index("custom_verification_identifier_idx").on(table.identifier)],
);

export const passkey = mysqlTable(
  "passkey",
  {
    id: int("id").autoincrement().primaryKey(),
    name: text("name"),
    publicKey: text("public_key").notNull(),
    userId: int("user_id")
      .notNull()
      .references(() => custom_user.id, { onDelete: "cascade" }),
    credentialID: text("credential_id").notNull(),
    counter: int("counter").notNull(),
    deviceType: text("device_type").notNull(),
    backedUp: boolean("backed_up").notNull(),
    transports: text("transports"),
    createdAt: timestamp("created_at", { fsp: 3 }),
    aaguid: text("aaguid"),
  },
  (table) => [index("passkey_userId_idx").on(table.userId)],
);
